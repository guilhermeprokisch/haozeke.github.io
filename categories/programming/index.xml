<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Rohit Goswami</title>
    <link>https://rgoswami.me/categories/programming/</link>
    <description>Recent content in programming on Rohit Goswami</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;.</copyright>
    <lastBuildDate>Wed, 10 Jun 2020 00:12:00 +0000</lastBuildDate>
    
	<atom:link href="https://rgoswami.me/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Emacs for Nix-R</title>
      <link>https://rgoswami.me/posts/emacs-nix-r/</link>
      <pubDate>Wed, 10 Jun 2020 00:12:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/emacs-nix-r/</guid>
      <description>A short post on my current set-up for R with nixpkgs and emacs to auto-compile my system configuration.
 Background This is my third post on working with nixpkgs and R.
 Part I covered ways of working effectively with R and nixpkgs Part II dealt with composing dependent devtools packages in a per-package environment, with a focus on rethinking and tidybayes.rethinking  This final part is about automating the system-wide configuration using emacs.</description>
    </item>
    
    <item>
      <title>Statistical Rethinking and Nix</title>
      <link>https://rgoswami.me/posts/rethinking-r-nix/</link>
      <pubDate>Sun, 07 Jun 2020 04:24:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/rethinking-r-nix/</guid>
      <description>This post describes how to set up a transparent automated setup for reproducible R workflows using nixpkgs, niv, and lorri. The explanatory example used throughout the post is one of setting up the rethinking package and running some examples from the excellent second edition of &amp;ldquo;Statistical Rethinking&amp;rdquo; by Richard McElreath.
 Background As detailed in an earlier post1, I had set up Nix to work with non-CRAN packages. If the rest of this section is unclear, please refer back to the earlier post.</description>
    </item>
    
    <item>
      <title>Nix with R and devtools</title>
      <link>https://rgoswami.me/posts/nix-r-devtools/</link>
      <pubDate>Sat, 06 Jun 2020 05:49:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/nix-r-devtools/</guid>
      <description>This post discusses briefly, the nix-shell environment for reproducible programming. In particular, there is an emphasis on extensions for installing and working with packages not in CRAN, i.e. packages off Github which are normally installed with devtools.
 Background The entire nix ecosystem is fantastic, and is the main packaging system used by d-SEAMS as well. Recently I began working through the excellent second edition of &amp;ldquo;Statistical Rethinking&amp;rdquo; by Richard McElreath1.</description>
    </item>
    
    <item>
      <title>Refactoring Dotfiles For Colemak</title>
      <link>https://rgoswami.me/posts/colemak-dots-refactor/</link>
      <pubDate>Sat, 02 May 2020 20:30:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/colemak-dots-refactor/</guid>
      <description>Background I have, in the past written about how I made the switch to Colemak. However, until recently, I was still trying to mimic the VIM keybindings from QWERTY. This is a post where I discuss the changes I made to ensure that I never have to stretch my fingers in odd ways again. The main idea is expressed well by vim-colemak.
Colemak layout: | QWERTY layout: `12345 67890-= Move around: | (instead of) `12345 67890-= qwfpg jluy;[]\  e | k qwert yuiop[]\  arstd HNEIo&amp;#39; h i | h l asdfg HJKL;&amp;#39; zxcvb km,.</description>
    </item>
    
    <item>
      <title>Pandoc to Orgmode with Babel</title>
      <link>https://rgoswami.me/posts/org-pandoc-babel/</link>
      <pubDate>Sat, 02 May 2020 16:39:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/org-pandoc-babel/</guid>
      <description>Background One of the best things about writing in orgmode is that we can embed and execute arbitrary code snippets. However, not all languages have an exporter, for obvious reasons. Somewhat surprisingly, there is no way to call pandoc on embedded snippets, which feels like a waste, especially when a whole bunch of documentation formats can be converted to orgmode with it.
Consider the following beautifully highlighted snippet of an rst (ReStructured Text) list table.</description>
    </item>
    
    <item>
      <title>Using Mathematica with Orgmode</title>
      <link>https://rgoswami.me/posts/org-mathematica/</link>
      <pubDate>Sun, 26 Apr 2020 20:01:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/org-mathematica/</guid>
      <description>Background I have been wanting to find a workflow which allows me to bypass writing a lot of TeX by hand for a while now. To that end I looked into using a computer algebra system (CAS). Naturally, my first choice was the FOSS Maxima (also because it uses Lisp under the hood). However, for all the reasons listed here, relating to its accuracy, which have not been fixed even though the post was over 5 years ago, I ended up having to go with the closed source Mathematica.</description>
    </item>
    
    <item>
      <title>Provisioning Dotfiles on an HPC</title>
      <link>https://rgoswami.me/posts/prov-dots/</link>
      <pubDate>Mon, 16 Mar 2020 00:06:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/prov-dots/</guid>
      <description>Background My dotfiles turned 4 years old a few months ago (since 9th Jan 2017) and remains one of my most frequently updated projects for obvious reasons. Going through the changes reminds me of a whole of posts I never got around to writing.
Anyway, recently I gained access to another HPC cluster, with a standard configuration (bash, old CentOS) and decided to track my provisioning steps. This is really a very streamlined experience by now, since I&amp;rsquo;ve used the same setup across scores of machines.</description>
    </item>
    
    <item>
      <title>Replacing Jupyter with Orgmode</title>
      <link>https://rgoswami.me/posts/jupyter-orgmode/</link>
      <pubDate>Thu, 13 Feb 2020 22:36:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/jupyter-orgmode/</guid>
      <description>Background  I dislike Jupyter notebooks (and JupyterHub) a lot EIN is really not much of a solution either  In the past I have written some posts on TeX with JupyterHub and discussed ways to use virtual Python with JupyterHub in a more reasonable manner.
However, I personally found that EIN was a huge pain to work with, and I mostly ended up working with the web-interface anyway.</description>
    </item>
    
    <item>
      <title>Poetry and Direnv</title>
      <link>https://rgoswami.me/posts/poetry-direnv/</link>
      <pubDate>Thu, 13 Feb 2020 21:36:00 +0000</pubDate>
      
      <guid>https://rgoswami.me/posts/poetry-direnv/</guid>
      <description>Background  I end up writing about using poetry a lot I almost always use direnv in real life too I don&amp;rsquo;t keep writing mini scripts in my .envrc  Honestly there&amp;rsquo;s nothing here anyone using the direnv wiki will find surprising, but then it is still neat to link back to.
Setting Up Poetry This essentially works by simply modifying the global .direnvrc which essentially gets sourced by every local .</description>
    </item>
    
  </channel>
</rss>